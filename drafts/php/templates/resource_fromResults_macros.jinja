<?
{% macro string_property(name, format) %}
    {% if format == 'date' %}
        assert('\Loris\Utility::isDate($results->{{ name }}) /* property must be in date format */');
        $this->{{ name }} = \DateTime::createFromFormat(
            '{{ input_date_format }}', 
            $results->{{ name }}
        );
    {% else %}
        assert('\Loris\Utility::isString($results->{{ name }}) /* property must be a string */');
        $this->{{ name }} = $results->{{ name }};
    {% endif %}
{% endmacro %}

{% macro number_property(name, format) %}
        assert('\Loris\Utility::isNumber($results->{{ name }}) /* property must be a number */');
        $this->{{ name }} = intval(
            $results->{{ name }}
        );
{% endmacro %}

{% macro boolean_property(name) %}
        assert('\Loris\Utility::isBool($results->{{ name }}) /* property must be a boolean */');
        $this->{{ name }} = boolval(
            $results->{{ name }}
        );
{% endmacro %}

{% macro resource_property(name) %}
        assert('isset($results->{{ name }}Id) /* resource id must be supplied */');
        if ($results->{{ name }}Id !== null) {
            $this->{{ name }}->id(
                $results->{{ name }}Id
            );
        } else {
            $this->{{ name }} = new NullResource();
        }
{% endmacro %}

{% macro collection_property(name) %}
        assert('isset($results->{{ name }}Id) /* collection id must be supplied */');
        assert('isset($results->{{ name }}Total) /* collection total must be supplied */');
        if ($results->{{ name }}Id !== null) {
            $this->{{ name }}->id(
                $results->{{ name }}Id
            );
            $this->{{ name }}->meta->total = intval(
                $results->{{ name }}Total
            );
        } else {
            $this->{{ name }} = new NullResource();
        }
{% endmacro %}

{% macro object_property_string(object, name, format) %}
    {% if format == 'date' %}   
        assert('\Loris\Utility::isDate($results->{{ object }}->{{ name }}) /* property must be in date format */');
        $this->{{ object }}->{{ name }} = \DateTime::createFromFormat(
            '{{ input_date_format }}', 
            $results->{{ object }}->{{ name }}
        );
    {% else %}
        assert('\Loris\Utility::isString($results->{{ object }}->{{ name }}) /* property must be a string */');
        $this->{{ object }}->{{ name }} = $results->{{ object }}->{{ name }};
    {% endif %}
{% endmacro %}

{% macro object_property_number(object, name, format) %}
        assert('\Loris\Utility::isNumber($results->{{ object }}->{{ name }}) /* property must be a number */');
        $this->{{ object }}->{{ name }} = intval(
            $results->{{ object }}->{{ name }}
        );
{% endmacro %}

{% macro object_property_boolean(object, name) %}
        assert('\Loris\Utility::isBool($results->{{ object }}->{{ name }}) /* property must be a boolean */');
        $this->{{ object }}->{{ name }} = boolval(
            $results->{{ object }}->{{ name }}
        );
{% endmacro %}

{% macro object_property_resource(object, name) %}
        assert('isset($results->{{ object }}->{{ name }}Id) /* resource id must be supplied */');
        if ($results->{{ object }}->{{ name }}Id !== null) {
            $this->{{ object }}->{{ name }}->id(
                $results->{{ object }}->{{ name }}Id
            );
        } else {
            $this->{{ object }}->{{ name }} = new NullResource();
        }
{% endmacro %}

{% macro object_property_collection(object, name) %}
        assert('isset($results->{{ object }}->{{ name }}Id) /* collection id must be supplied */');
        assert('isset($results->{{ object }}->{{ name }}Total) /* collection total must be supplied */');
        if ($results->{{ object }}->{{ name }}Id !== null) {
            $this->{{ object }}->{{ name }}->id(
                $results->{{ object }}->{{ name }}Id
            );
            $this->{{ object }}->{{ name }}->meta->total = intval(
                $results->{{ object }}->{{ name }}Total
            );
        } else {
            $this->{{ object }}->{{ name }} = new NullResource();
        }
{% endmacro %}

{% macro array_property_strings(name, format) %}
        foreach ($results->{{ name }} as $item) {
        {% if format == 'date' %}
            assert('\Loris\Utility::isDate($item) /* property must be in date format */');
            $this->{{ name }}[] = \DateTime::createFromFormat(
                '{{ input_date_format }}', 
                $item
            );
        {% else %}
            assert('\Loris\Utility::isString($item) /* property must be a string */');
            $this->{{ name }}[] = $item;
        {% endif %}
        }
{% endmacro %}

{% macro array_property_numbers(name, format) %}
        foreach ($results->{{ name }} as $item) {
            assert('\Loris\Utility::isNumber($item) /* property must be a number */');
            $this->{{ name }}[] = intval($item);
        }
{% endmacro %}

{% macro array_property_booleans(name) %}
        foreach ($results->{{ name }} as $item) {
            assert('\Loris\Utility::isBool($item) /* property must be a boolean */');
            $this->{{ name }}[] = boolval($item);
        }
{% endmacro %}

{% macro array_property_resources(name, resource_id) %}
        foreach ($results->{{ name }} as $item) {
            assert('isset($item->{{ resource_id|camelcase }}Id) /* {{ resource_id|camelcase }}Id must be supplied */');
            if ($item->{{ resource_id|camelcase }}Id !== null) {
                ${{ resource_id|camelcase }} = clone $this->{{ name }}Template;
                ${{ resource_id|camelcase }}->id(
                    $item->{{ resource_id|camelcase }}Id
                );
                $this->{{ name }}[] = ${{ resource_id|camelcase }};
            }
        }
{% endmacro %}

{% macro array_property_collections(name, collection_id) %}
        foreach ($results->{{ name }} as $item) {
            assert('isset($item->{{ collection_id|camelcase }}Id) /* {{ collection_id|camelcase }}Id must be supplied */');
            assert('isset($item->{{ collection_id|camelcase }}Total) /* {{ collection_id|camelcase }}Total must be supplied */');
            if ($item->{{ collection_id|camelcase }}Id !== null) {
                ${{ collection_id|camelcase }} = clone $this->{{ name }}Template;
                ${{ collection_id|camelcase }}->id(
                    $item->{{ collection_id|camelcase }}Id
                );
                ${{ collection_id|camelcase }}->meta->total = intval(
                    $item->{{ collection_id|camelcase }}Total
                );
                $this->{{ name }}[] = ${{ collection_id|camelcase }};
            }
        }
{% endmacro %}

{% macro array_property_object(name) -%}
            $this->{{ name }}[$i] = clone $this->{{ name }}Template;
{%- endmacro %}

{% macro array_property_object_string(array, name, format) %}
    {% if format == 'date' %}   
            assert('\Loris\Utility::isDate($results->{{ array }}[$i]->{{ name }}) /* property must be in date format */');
            $this->{{ array }}[$i]->{{ name }} = \DateTime::createFromFormat(
                '{{ input_date_format }}', 
                $results->{{ array }}[$i]->{{ name }}
            );
    {% else %}
            assert('\Loris\Utility::isString($results->{{ array }}[$i]->{{ name }}) /* property must be a string */');
            $this->{{ array }}[$i]->{{ name }} = $results->{{ array }}[$i]->{{ name }};
    {% endif %}
{% endmacro %}

{% macro array_property_object_number(array, name, format) %}
            assert('\Loris\Utility::isNumber($results->{{ array }}[$i]->{{ name }}) /* property must be a number */');
            $this->{{ array }}[$i]->{{ name }} = intval(
                $results->{{ array }}[$i]->{{ name }}
            );
{% endmacro %}

{% macro array_property_object_boolean(array, name) %}
            assert('\Loris\Utility::isBool($results->{{ array }}[$i]->{{ name }}) /* property must be a boolean */');
            $this->{{ array }}[$i]->{{ name }} = boolval(
                $results->{{ array }}[$i]->{{ name }}
            );
{% endmacro %}

{% macro array_property_object_resource(array, name) %}
            assert('isset($results->{{ array }}[$i]->{{ name }}Id) /* resource id must be supplied */');
            if ($results->{{ array }}[$i]->{{ name }}Id !== null) {
                $this->{{ array }}[$i]->{{ name }}->id(
                    $results->{{ array }}[$i]->{{ name }}Id
                );
            } else {
                $this->{{ array }}[$i]->{{ name }} = new NullResource();
            }
{% endmacro %}

{% macro array_property_object_collection(array, name) %}
            assert('isset($results->{{ array }}[$i]->{{ name }}Id) /* collection id must be supplied */');
            assert('isset($results->{{ array }}[$i]->{{ name }}Total) /* collection total must be supplied */');
            if ($results->{{ array }}[$i]->{{ name }}Id !== null) {
                $this->{{ array }}[$i]->{{ name }}->id(
                    $results->{{ array }}[$i]->{{ name }}Id
                );
                $this->{{ array }}[$i]->{{ name }}->meta->total = intval(
                    $results->{{ array }}[$i]->{{ name }}Total
                );
            } else {
                $this->{{ array }}[$i]->{{ name }} = new NullResource();
            }
{% endmacro %}



