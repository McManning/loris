<?php
namespace Loris\Resource;

use \Loris\Utility;

class {{ id }} extends Base\{{ id }}
{
    /**
     * @param array({{ id }}) ${{ id|camelcase }}s
     */
    public static function query(array ${{ id|camelcase }}s)
    {
        /**********************************************************
            YOUR BACKEND QUERY CODE HERE

            Useful variables for your query include:
            
                ${{ id|camelcase }}s[N]->ids()
                - A mapping between primary keys and their values. 
                    For this resource type, it looks like:
                    array(
                        {% for id in id_keys %}
                        {{ id }} = string
                        {% endfor %}
                    )

            The output of your query must be formatted as below:

            $results = array(
                stdClass(
            {% for name, property in properties|dictsort -%}
                {% if property.type == 'string' %}
                    {% if property.format == 'date' %}
                    {{ name }} = string formatted '{{ input_date_format }}'
                    {% else %}
                    {{ name }} = string
                    {% endif %}
                {% elif property.type == 'number' %}
                    {{ name }} = number
                {% elif property.type == 'boolean' %}
                    {{ name }} = boolean
                {% elif property.type == 'resource' %}
                    {% for id in property.ids %}
                    {{ name + id|pascalcase }} = string
                    {% endfor %}
                {% elif property.type == 'collection' %}
                    {% for id in property.ids %}
                    {{ name + id|pascalcase }} = string
                    {% endfor %}
                    {{ name }}Total = number
                {% elif property.type == 'object' %}
                    {{ name }} = stdClass(
                    {% for name2, property2 in property.properties|dictsort %}
                    {% if property2.type == 'string' %}
                        {% if property2.format == 'date' %}
                        {{ name2 }} = string formatted '{{ input_date_format }}'
                        {% else %}
                        {{ name2 }} = string
                        {% endif %}
                    {% elif property2.type == 'number' %}
                        {{ name2 }} = number
                    {% elif property2.type == 'boolean' %}
                        {{ name2 }} = boolean
                    {% elif property2.type == 'resource' %}
                        {% for id in property2.ids %}
                        {{ name2 + id|pascalcase }} = string
                        {% endfor %}
                    {% elif property2.type == 'collection' %}
                        {% for id in property2.ids %}
                        {{ name2 + id|pascalcase }} = string
                        {% endfor %}
                        {{ name2 }}Total = number
                    {% endif %}
                    {% endfor %}
                    )
                {% elif property.type == 'array' %}
                    {{ name }} = array(
                    {% if property['items'].type == 'string' %}
                        {% if property['items'].format == 'date' %}
                        string formatted '{{ input_date_format }}'
                        {% else %}
                        string
                        {% endif %}
                    {% elif property['items'].type == 'number' %}
                        number
                    {% elif property['items'].type == 'boolean' %}
                        boolean
                    {% elif property['items'].type == 'resource' %}
                        stdClass(
                            {% for id in property['items'].ids %}
                            {{ property['items'].resource|camelcase + id|pascalcase }} = string
                            {% endfor %}
                        )
                    {% elif property['items'].type == 'collection' %}
                        stdClass(
                            {% for id in property['items'].ids %}
                            {{ property['items'].collection|camelcase + id|pascalcase }} = string
                            {% endfor %}
                            {{ property['items'].collection|camelcase }}Total = number
                        )
                    {% elif property['items'].type == 'object' %}
                        stdClass(
                        {% for name2, property2 in property['items'].properties|dictsort %}
                        {% if property2.type == 'string' %}
                            {% if property2.format == 'date' %}
                            {{ name2 }} = string formatted '{{ input_date_format }}'
                            {% else %}
                            {{ name2 }} = string
                            {% endif %}
                        {% elif property2.type == 'number' %}
                            {{ name2 }} = number
                        {% elif property2.type == 'boolean' %}
                            {{ name2 }} = boolean
                        {% elif property2.type == 'resource' %}
                            {% for id in property2.ids %}
                            {{ name2 + id|pascalcase }} = string
                            {% endfor %}
                        {% elif property2.type == 'collection' %}
                            {% for id in property2.ids %}
                            {{ name2 + id|pascalcase }} = string
                            {% endfor %}
                            {{ name2 }}Total = number
                        {% endif %}
                        {% endfor %}
                        )
                    {% endif %}
                        ...
                    )
                {% endif %}
            {%- endfor %}
                )
                ...
            )

            !!  Important note: It may be possible that multiple
                resources that share the same ID may be in the list
                at once (depending on how expansions and relationships
                are performed internally). It is up to the implementer
                to ensure that only unique IDs are returned in the 
                $results array (postQuery will make the effort to 
                remap these to each resource that shares IDs)

        ***********************************************************/

        self::postQuery(${{ id|camelcase }}s, $results);
    }
}

