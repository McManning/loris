<?php
namespace Loris\Resource\Base;

class {{ id }} extends MetaCollection
{
    const URI = '{{ uri }}';

    public $collection = null; // Array({{ properties.collection.resource }})
    protected $expansions = null; // Array

    /**
     * Track the properties that are used as our collections 
     * distinct identifier (one or composite). Each match
     * within URI must exist within this list. 
     */
    private $_id = array(
        '{{ id_keys|join('\', \'') }}'
    );
    {# ' <- just to fix broken highlighting :) #}

    // Properties

{% for name, property in properties|dictsort %}
    {% if name in id_keys %}
    {% if property.description %}
    /** 
     * {{ property.description|replace('\n', '\n     * ') }}
     * type: {{ property.format if property.format else property.type }}
     */
    {% else %}
    /** type: {{ property.type }} */
    {% endif %}
    public ${{ name }} = null;
    {% endif %}
{% endfor %}

    /**
     * @param array $ids Unique identifiers for this collection
     * @param integer $page Currently page of the collection to query (1-indexed)
     * @param integer $limit Number of results per collection page 
     */
    function __construct($ids = null, $page, $limit)
    {
        parent::__construct($ids, self::URI, $page, $limit);
    }

    /**
     *
     * @param array({{ id }}) ${{ id|camelcase }}s
     */
    public static function query(array ${{ id_var_plural }})
    {
        throw new \Exception(
            'Base\\{{ id }}::query() cannot be called directly.'
        );
    }

    /**
     *
     * @param array({{ id }}) ${{ id_var_plural }}
     * @param array $results
     */
    public static function postQuery(array ${{ id_var_plural }}, array $results)
    {
        foreach (${{ id_var_plural }} as ${{ id_var }}) {
            $found = false;
            foreach ($results as $result) {
                if ({% for id in id_keys -%}
                        $result->{{ id }} === ${{ id_var }}->{{ id }} 
                    {{- ' &&\n                    ' if not loop.last }}
                {%- endfor %}) {
                    
                    ${{ id_var }}->fromResults($result);
                    $found = true;
                    break;
                }
            }
            if (!$found) {
                $ids = array(
                {% for id in id_keys %}
                    '{{ id }}=' . ${{ id_var }}->{{ id }}{{',' if not loop.last }}
                {% endfor %}
                );
                throw new \Exception(
                    '{{ id }} <' . implode(', ', $ids) . '> missing from query'
                );
            }
        }

        // For all collections, join their hydrated resources for a query
        ${{ properties.collection.resource|camelcase }}s = array();
        foreach (${{ id_var_plural }} as ${{ id_var }}) {
            if (count(${{ id_var }}->collection) > 0) {
                ${{ properties.collection.resource|camelcase }}s = array_merge(
                    ${{ properties.collection.resource|camelcase }}s, 
                    ${{ id_var }}->collection
                );
            }
        }

        if (count(${{ properties.collection.resource|camelcase }}s) > 0) {
            
            // Resolve to a {{ properties.collection.resource }} or ExternalResource
            ${{ properties.collection.resource|camelcase}}Model = \Loris\Discovery::find(
                '{{ properties.collection.uri }}'
            );

            // Execute query for set of resources
            call_user_func(
                array(${{ properties.collection.resource|camelcase }}Model->class, 'query'), 
                ${{ properties.collection.resource|camelcase }}s
            );
        }
    }

    /**
     * @param array $results
     */
    public function fromResults(\stdClass $results)
    {
    {% for id in id_keys %}
        assert('\Loris\Utility::isString($results, \'{{ id }}\') /* property must be a string */');
        $this->{{ id }} = $results->{{ id }};
    {% endfor %}

        assert('\Loris\Utility::isNumber($results, \'page\') /* property must be a number */');
        $this->meta->page = intval($results->page);

        assert('\Loris\Utility::isNumber($results, \'limit\') /* property must be a number */');
        $this->meta->limit = intval($results->limit);

        assert('\Loris\Utility::isNumber($results, \'total\') /* property must be a number */');
        $this->meta->total = intval($results->total);

        $this->collection = array();

        // Resolve resource URI into a model
        ${{ properties.collection.resource|camelcase }}Model = \Loris\Discovery::find(
            '{{ properties.collection.uri }}'
        );

        // Add a {{ properties.collection.resource }} for each ID
        foreach ($results->collection as $row) {
            // Note we resolve the model here instead of doExpansions
            // as no matter what, if a collection is hydrated, the
            // collection items must also be hydrated. 
            ${{ properties.collection.resource|camelcase }} = new ${{ properties.collection.resource|camelcase }}Model->class(
                array({% for id in properties.collection.ids -%}
                '{{ id }}' => $row->{{ properties.collection.resource|camelcase }}{{ id|pascalcase }}
                {{- ', ' if not loop.last }}
                {%- endfor %})
            );

            $this->collection[] = ${{ properties.collection.resource|camelcase }};
        }

        $this->doExpansions();
    }

    /**
     *
     * @param array $resources
     */
    public function expand(array $resources)
    {
        $this->expansions = $resources;
    }

    /**
     * Perform actual expansions after hydration, in case we dynamically
     * add additional resource references while hydrating from the data store
     * (e.g. resources stored in Arrays or Objects)
     */
    private function doExpansions()
    {
        if ($this->expansions === null) {
            return;
        }

        foreach ($this->collection as ${{ properties.collection.resource|camelcase }}) {
            ${{ properties.collection.resource|camelcase }}->expand($this->expansions);
        }
    }

    /**
     * @return stdClass
     */
    public function serialize()
    {
        // Get serialized data from MetaCollection
        $serialized = parent::serialize();

        // Add a collection if we've been hydrated
        if ($this->collection) {
            $serialized->collection = array();

            // Serialize all of our {{ properties.collection.resource }}s
            foreach ($this->collection as ${{ properties.collection.resource|camelcase }}) {
                $serialized->collection[] = ${{ properties.collection.resource|camelcase }}->serialize();
            }
        }
        
        return $serialized;
    }
}

