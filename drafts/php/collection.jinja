<?php
namespace Loris\Resource;

use \Loris\Utility;

class {{ collection.id }} extends Base\{{ collection.id }}
{
    public static function query(array ${{ collection.id|camelcase|plural }})
    {
        $results = array();

        foreach (${{ collection.id|camelcase|plural }} as ${{ collection.id|camelcase }}) {
            $results += ${{ collection.id|camelcase }}->querySingle();
        }

        self::postQuery(${{ collection.id|camelcase|plural }}, $results);
    }

    /**
     * @brief Simpler query for a set of collection results.
     * 
     * Since we do not currently have the capability to query multiple
     * collections simultaneously (due to the need for each to pass in its
     * own page & limit), querySingle() runs a single instance of a collection,
     * and then returns the results to be merged in with the rest. 
     * 
     * @return array
     */
    public function querySingle()
    {
        /**********************************************************
            YOUR BACKEND QUERY CODE HERE

            For SQL/PDO, it expects the following:

                rowset 0 (collection attributes)
                    id, page, limit, total

                rowset 1 (ids of each resource on the page)
                    id, resourceId
                    ...

            Useful variables for your query include:
                $this->id() - unique identifier of this collection
                $this->meta->page - requested collection page
                $this->meta->limit - requested number of results 

            The below code assumes $statement is a PDO  
            prepared statement that has been executed. 
        ***********************************************************/

        $results = Utility::parseSqlResults(
            $statement,
            array(
                'ids' => array( // Array of strings
                    'rowset' => 1,
                    'type' => 'array',
                    'column' => 'resourceId'
                )
            )
        );

        return $results;
    }
}
