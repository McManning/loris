<?php
namespace Loris\Resource\Base;

use \Loris\Utility;

class {{ id }} extends Meta
{
    {% if uri is string %}
    const URI = '{{ uri }}';
    {% else %}
    // TODO: Class constants cannot be arrays in PHP. Either this
    // must be static, or not defined as an array. In the meantime,
    // the first URI entry was chosen as self::URI.
    const URI = '{{ uri[0] }}';
    /*
    const URI = [
        '{{ uri|join('\',\n        \'') }}'
    ];
    */
    {# ' <- just to fix broken highlighting :) #}
    {% endif %}

    /**
     *
     * @var array
     */
    private $expansions = null;

    {% if id_keys %}
    /**
     * Track the properties that are used as our resources 
     * distinct identifier (one or composite). Each match
     * within URI must exist within this list. 
     */
    private $_id = [
        '{{ id_keys|join('\', \'') }}' {# ' <- just to fix broken highlighting :) #}
    ];
    {% else %}
    /**
     * This resource does not have any IDs
     */
    private $_id = null;
    {% endif %}

    // Properties

{% for name, property in properties|dictsort %}
    {% if property.description %}
    /** 
     * {{ property.description|replace('\n', '\n     * ') }}
     * type: {{ property.format if property.format else property.type }}
     */
    {% else %}
    /** type: {{ property.type }} */
    {% endif %}
    {% if property.type == 'array' %}
    public ${{ name }} = [];
    {% if property['items'].type == 'resource' or
        property['items'].type == 'collection' or 
        property['items'].type == 'object' %}

    /**
     * Maintains a template of the inner {{ property['items'].type }} of 
     * $this->{{ name }} for copying to new array items.
     */
    private ${{ name }}Template = null;  
    {% endif %}
    {% else %}
    public ${{ name }} = null;
    {% endif %}
{% endfor %}

    /**
     * @param array $ids Unique identifiers for this resource
     */
    function __construct($ids)
    {
        parent::__construct($ids, self::URI);

        // Create Meta(Collection)s for relationships
        // Note: The inclusion of a URI is required here as we can possibly
        // never replace Meta(Collection) with an actual class (if non-expanded)
        // but we still need to know the resource URI. The problem then becomes,
        // where do we get this URI? We can't guarantee to have access to Resource::URI
        // because resources may not exist on the same instance as this caller. 
        // Further note that ID keys must be specified prior to any access, as each
        // needs to know what to use as an ID. This is baked into resource implementations, 
        // but again, the resource may reside externally and we need to identify what,
        // from our data store on *this* resource, would be considered an ID attribute

        {% import 'resource_constructor_macros.jinja' as macros with context %}
        {% for name, property in properties|dictsort -%}
            {% if property.type == 'resource' -%}
                {{ macros.resource_property(name, property.uri, property.ids) }}
            {% elif property.type == 'collection' -%}
                {{ macros.collection_property(name, property.uri, property.ids) }}
            {% elif property.type == 'object' %}
                {{- 
                    macros.object_property(name) 
                }}
                {% for name2, property2 in property.properties|dictsort %}
                    {% if property2.type == 'resource' -%}
                        {{- 
                            macros.object_property_resource(name, name2, property2.uri, property2.ids) 
                        }}
                    {% elif property2.type == 'collection' -%}
                        {{- 
                            macros.object_property_collection(name, name2, property2.uri, property2.ids) 
                        }}
                    {% endif %}
                {% endfor %}
            {% elif property.type == 'array' %}
                {% if property['items'].type == 'resource' %}
                    {{- 
                        macros.array_property_resources(name, property['items'].uri, property['items'].ids) 
                    }}
                {% elif property['items'].type == 'collection' %}
                    {{- 
                        macros.array_property_collections(name, property['items'].uri, property['items'].ids) 
                    }}
                {% elif property['items'].type == 'object' %}
                    {{- 
                        macros.array_property_object(name)
                    }}
                    {% for name2, property2 in property['items'].properties|dictsort %}
                        {% if property2.type == 'resource' -%}
                            {{- 
                                macros.array_property_object_resource(name, name2, property2.uri, property2.ids) 
                            }}
                        {% elif property2.type == 'collection' -%}
                            {{- 
                                macros.array_property_object_collection(name, name2, property2.uri, property2.ids) 
                            }}
                        {% endif %}
                    {% endfor %}
                {% endif %}
            {% endif %}
        {%- endfor %}
    }

    /**
     *
     * @param array({{ id }}) ${{ id_var_plural }}
     */
    public static function query(array ${{ id_var_plural }})
    {
        throw new \Exception(
            'Base\\{{ id }}::query() cannot be called directly.'
        );
    }

    /**
     *
     * @param array({{ id }}) ${{ id_var_plural }}
     * @param {% if id_keys %}array{% else %}\stdClass{% endif %} $results
     */
    public static function postQuery(array ${{ id_var_plural }}, {% if id_keys %}array{% else %}\stdClass{% endif %} $results)
    {
        foreach (${{ id_var_plural }} as ${{ id_var }}) {
            {% if id_keys %}
            $found = false;
            foreach ($results as $result) {
                if ({% for id in id_keys -%}
                        $result->{{ id }} === ${{ id_var }}->{{ id }} 
                    {{- ' &&\n                    ' if not loop.last }}
                {%- endfor %}) {
                    
                    ${{ id_var }}->fromResults($result);
                    $found = true;
                    break;
                }
            }
            if (!$found) {
                $ids = [
                {% for id in id_keys %}
                    '{{ id }}=' . ${{ id_var }}->{{ id }}{{',' if not loop.last }}
                {% endfor %}
                ];

                ${{ id_var }}->setError(
                    '{{ id }} <' . implode(', ', $ids) . '> missing from query'
                );
                //${{ id_var }} = new NotFoundResource(
                //    ${{ id_var }}->uri()
                //);
                // TODO: How to deal with missing resources! Doing a &{{ id_var }} above
                // during iteration breaks collection functionality, as the last item in
                // the iteration seems to not be expanded on (why?...) 
            }
            {% else %} 
            ${{ id_var }}->fromResults($results);
            {% endif %}
        }

        // Query for all expanded relationships
        {% import 'resource_postQuery_macros.jinja' as macros with context %}
        {% for name, property in properties|dictsort -%}
            {% if property.type == 'resource' -%}
                {{ macros.resource_property(name) }}
            {% elif property.type == 'collection' -%}
                {{ macros.collection_property(name) }}
            {% elif property.type == 'object' %}
                {% for name2, property2 in property.properties|dictsort %}
                    {% if property2.type == 'resource' -%}
                        {{- 
                            macros.object_property_resource(name, name2) 
                        }}
                    {% elif property2.type == 'collection' -%}
                        {{- 
                            macros.object_property_collection(name, name2) 
                        }}
                    {% endif %}
                {% endfor %}
            {% elif property.type == 'array' %}
                {% if property['items'].type == 'resource' %}
                    {{- 
                        macros.array_property_resources(name) 
                    }}
                {% elif property['items'].type == 'collection' %}
                    {{- 
                        macros.array_property_collections(name) 
                    }}
                {% elif property['items'].type == 'object' %}
                    {% for name2, property2 in property['items'].properties|dictsort %}
                        {% if property2.type == 'resource' -%}
                            {{- 
                                macros.array_property_object_resource(name, name2) 
                            }}
                        {% elif property2.type == 'collection' -%}
                            {{- 
                                macros.array_property_object_collection(name, name2) 
                            }}
                        {% endif %}
                    {% endfor %}
                {% endif %}
            {% endif %}
        {%- endfor %}
    }

    /**
     *
     * @param \stdClass $results
     */
    public function fromResults(\stdClass $results)
    {
        {% import 'resource_fromResults_macros.jinja' as macros with context %}
        {% for name, property in properties|dictsort -%}
            {% if property.type == 'string' -%}
                {{ macros.string_property(name, property.format) }}
            {% elif property.type == 'number' -%}
                {{ macros.number_property(name, property.format) }}
            {% elif property.type == 'boolean' -%}
                {{ macros.boolean_property(name) }}
            {% elif property.type == 'resource' -%}
                {{ macros.resource_property(name, property.ids) }}
            {% elif property.type == 'collection' -%}
                {{ macros.collection_property(name, property.ids) }}
            {% elif property.type == 'object' %}
                {% for name2, property2 in property.properties|dictsort %}
                    {% if property2.type == 'string' -%}
                        {{ macros.object_property_string(name, name2, property2.format) }}
                    {% elif property2.type == 'number' -%}
                        {{ macros.object_property_number(name, name2, property2.format) }}
                    {% elif property2.type == 'boolean' -%}
                        {{ macros.object_property_boolean(name, name2) }}
                    {% elif property2.type == 'resource' -%}
                        {{- 
                            macros.object_property_resource(name, name2, property2.ids) 
                        }}
                    {% elif property2.type == 'collection' -%}
                        {{- 
                            macros.object_property_collection(name, name2, property2.ids) 
                        }}
                    {% endif %}
                {% endfor %}
            {% elif property.type == 'array' %}
                {% if property['items'].type == 'string' -%}
                    {{ macros.array_property_strings(name, property['items'].format) }}
                {% elif property['items'].type == 'number' -%}
                    {{ macros.array_property_numbers(name, property['items'].format) }}
                {% elif property['items'].type == 'boolean' -%}
                    {{ macros.array_property_booleans(name) }}
                {% elif property['items'].type == 'resource' %}
                    {{- 
                        macros.array_property_resources(
                            name, 
                            property['items'].resource, 
                            property['items'].ids
                        ) 
                    }}
                {% elif property['items'].type == 'collection' %}
                    {{- 
                        macros.array_property_collections(
                            name, 
                            property['items'].resource, 
                            property['items'].ids
                        ) 
                    }}
                {% elif property['items'].type == 'object' %}
        ${{ name }}Count = count($results->{{ name }});
        for ($i = 0; $i < ${{ name }}Count; $i++) {
            {{ macros.array_property_object(name) }}

                    {% for name2, property2 in property['items'].properties|dictsort %}
                        {% if property2.type == 'string' -%}
                            {{ macros.array_property_object_string(name, name2, property2.format) }}
                        {% elif property2.type == 'number' -%}
                            {{ macros.array_property_object_number(name, name2, property2.format) }}
                        {% elif property2.type == 'boolean' -%}
                            {{ macros.array_property_object_boolean(name, name2) }}
                        {% elif property2.type == 'resource' -%}
                            {{- 
                                macros.array_property_object_resource(name, name2, property2.ids) 
                            }}
                        {% elif property2.type == 'collection' -%}
                            {{- 
                                macros.array_property_object_collection(name, name2, property2.ids) 
                            }}
                        {% endif %}
                    {% endfor %}
        }

                {% endif %}
            {% endif %}
        {%- endfor %}
        // Perform expansions after hydration, in case we hydrated any
        // additional resource references in Arrays or Objects
        $this->doExpansions();
    }

    /**
     * 
     * @param array $resources
     */
    public function expand(array $resources)
    {

        $this->expansions = $resources;
    }

    /**
     * Perform actual expansions after hydration.
     *
     * This is added as a separate step in case we dynamically add 
     * additional resource references while hydrating from the data store
     * (e.g. resources stored in Arrays or Objects)
     */
    private function doExpansions()
    {
        if ($this->expansions === null) {
            return;
        }

        {% import 'resource_doExpansions_macros.jinja' as macros with context %}
        {% for name, property in properties|dictsort -%}
            {% if property.type == 'resource' -%}
                {{ macros.resource_property(name) }}
            {% elif property.type == 'collection' -%}
                {{ macros.collection_property(name) }}
            {% elif property.type == 'object' %}
                {% for name2, property2 in property.properties|dictsort %}
                    {% if property2.type == 'resource' -%}
                        {{- 
                            macros.object_property_resource(name, name2) 
                        }}
                    {% elif property2.type == 'collection' -%}
                        {{- 
                            macros.object_property_collection(name, name2) 
                        }}
                    {% endif %}
                {% endfor %}
            {% elif property.type == 'array' %}
                {% if property['items'].type == 'resource' %}
                    {{- 
                        macros.array_property_resources(name) 
                    }}
                {% elif property['items'].type == 'collection' %}
                    {{- 
                        macros.array_property_collections(name) 
                    }}
                {% elif property['items'].type == 'object' %}
                    {% for name2, property2 in property['items'].properties|dictsort %}
                        {% if property2.type == 'resource' -%}
                            {{- 
                                macros.array_property_object_resource(name, name2) 
                            }}
                        {% elif property2.type == 'collection' -%}
                            {{- 
                                macros.array_property_object_collection(name, name2) 
                            }}
                        {% endif %}
                    {% endfor %}
                {% endif %}
            {% endif %}
        {%- endfor %}
    }

    /**
     * Serializes this resource and all expanded resource properties.
     * 
     * This method generates a simple object that can be passed to 
     * `json_encode` for final encoding. Complex type attributes (such
     * as DateTime) are automatically converted to a standard presentation.
     * 
     * @return \stdClass
     */
    public function serialize()
    {
        // Get serialized data from Meta
        $serialized = parent::serialize();

        // If this resource had an error during processing, return
        // the error message structure serialized by base Meta(Collection)
        // and hide any properties/relationships that may be invalid. 
        if ($this->hasError()) {
            return $serialized;
        }

        {% import 'resource_serialize_macros.jinja' as macros with context %}
        {% for name, property in properties|dictsort -%}
            {% if property.type == 'string' or 
                property.type == 'number' or 
                property.type == 'boolean' -%}
                {{ macros.primitive_property(name, property.format) }}
            {% elif property.type == 'resource' -%}
                {{ macros.resource_property(name) }}
            {% elif property.type == 'collection' -%}
                {{ macros.collection_property(name) }}
            {% elif property.type == 'object' %}
                {{-
                    macros.object_property(name)
                -}}
                {% for name2, property2 in property.properties|dictsort %}
                    {% if property2.type == 'string' or 
                        property2.type == 'number' or 
                        property2.type == 'boolean' -%}
                        {{ macros.object_property_primitive(name, name2, property2.format) -}}
                    {% elif property2.type == 'resource' -%}
                        {{- 
                            macros.object_property_resource(name, name2) 
                        -}}
                    {% elif property2.type == 'collection' -%}
                        {{- 
                            macros.object_property_collection(name, name2) 
                        -}}
                    {% endif %}
                {% endfor %}

            {% elif property.type == 'array' %}
                {% if property['items'].type == 'string' or 
                    property['items'].type == 'number' or 
                    property['items'].type == 'boolean' -%}
                    {{ macros.array_property_primitives(name, property['items'].format) }}
                {% elif property['items'].type == 'resource' %}
                    {{- 
                        macros.array_property_resources(name) 
                    }}
                {% elif property['items'].type == 'collection' %}
                    {{- 
                        macros.array_property_collections(name) 
                    }}
                {% elif property['items'].type == 'object' %}
        $serialized->{{ name }} = [];
        ${{ name }}Count = count($this->{{ name }});
        for ($i = 0; $i < ${{ name }}Count; $i++) {
            {{ macros.array_property_object(name) }}
                    {% for name2, property2 in property['items'].properties|dictsort %}
                        {% if property2.type == 'string' or 
                            property2.type == 'number' or 
                            property2.type == 'boolean' -%}
                            {{ macros.array_property_object_primitive(name, name2, property2.format) -}}
                        {% elif property2.type == 'resource' -%}
                            {{- 
                                macros.array_property_object_resource(name, name2) 
                            -}}
                        {% elif property2.type == 'collection' -%}
                            {{- 
                                macros.array_property_object_collection(name, name2) 
                            -}}
                        {% endif %}
                    {% endfor %}
        }

                {% endif %}
            {% endif %}
        {%- endfor %}
        return $serialized;
    }
}

