<?
{% macro string_property(name, format) %}
    {% if format == 'date' %}
        assert('\Loris\Utility::isDate($results, \'{{ name }}\') /* property must be in date format */');
        $this->{{ name }} = \DateTime::createFromFormat(
            '{{ input_date_format }}', 
            $results->{{ name }}
        ) ?: null;
    {% else %}
        assert('\Loris\Utility::isString($results, \'{{ name }}\') /* property must be a string */');
        $this->{{ name }} = $results->{{ name }};
    {% endif %}
{% endmacro %}

{% macro number_property(name, format) %}
        assert('\Loris\Utility::isNumber($results, \'{{ name }}\') /* property must be a number */');
        $this->{{ name }} = intval(
            $results->{{ name }}
        );
{% endmacro %}

{% macro boolean_property(name) %}
        assert('\Loris\Utility::isBool($results, \'{{ name }}\') /* property must be a boolean */');
        $this->{{ name }} = boolval(
            $results->{{ name }}
        );
{% endmacro %}

{% macro resource_property(name, ids) %}
    {% for id in ids %}
        assert('\Loris\Utility::isString($results, \'{{ name + id|pascalcase }}\') /* resource id must be a string */');
    {% endfor %}
        {% if ids %}
        if ($results->{{ name }}{{ ids|pascalcase|join(' != null && \n            $results->' + name) }} != null) {
        {% endif %}
        
        {% for id in ids %}
            $this->{{ name }}->{{ id }} = $results->{{ name + id|pascalcase }};
        {% endfor %}
            $this->{{ name }}->updateMetaUri();
        {% if ids %}
        } else {
            $this->{{ name }} = new NullResource(
                $this->{{ name }}->uri()
            );
        }
        {% endif %}
{% endmacro %}

{% macro collection_property(name, ids) %}
    {% for id in ids %}
        assert('\Loris\Utility::isString($results, \'{{ name + id|pascalcase }}\') /* collection id must be a string */');
    {% endfor %}
        assert('\Loris\Utility::isNumber($results, \'{{ name }}Total\') /* collection total must be a number */');
        {% if ids %}
        if ($results->{{ name }}{{ ids|pascalcase|join(' != null && \n            $results->' + name) }} != null) {
        {% endif %}

        {% for id in ids %}
            $this->{{ name }}->{{ id }} = $results->{{ name + id|pascalcase }};
        {% endfor %}
            $this->{{ name }}->meta->total = intval(
                $results->{{ name }}Total
            );
            $this->{{ name }}->updateMetaUri();
        {% if ids %}
        } else {
            $this->{{ name }} = new NullResource(
                $this->{{ name }}->uri()
            );
        }
        {% endif %}
{% endmacro %}

{% macro object_property_string(object, name, format) %}
    {% if format == 'date' %}   
        assert('\Loris\Utility::isDate($results->{{ object }}, \'{{ name }}\') /* property must be in date format */');
        $this->{{ object }}->{{ name }} = \DateTime::createFromFormat(
            '{{ input_date_format }}', 
            $results->{{ object }}->{{ name }}
        ) ?: null;
    {% else %}
        assert('\Loris\Utility::isString($results->{{ object }}, \'{{ name }}\') /* property must be a string */');
        $this->{{ object }}->{{ name }} = $results->{{ object }}->{{ name }};
    {% endif %}
{% endmacro %}

{% macro object_property_number(object, name, format) %}
        assert('\Loris\Utility::isNumber($results->{{ object }}, \'{{ name }}\') /* property must be a number */');
        $this->{{ object }}->{{ name }} = intval(
            $results->{{ object }}->{{ name }}
        );
{% endmacro %}

{% macro object_property_boolean(object, name) %}
        assert('\Loris\Utility::isBool($results->{{ object }}, \'{{ name }}\') /* property must be a boolean */');
        $this->{{ object }}->{{ name }} = boolval(
            $results->{{ object }}->{{ name }}
        );
{% endmacro %}

{% macro object_property_resource(object, name, ids) %}
    {% for id in ids %}
        assert('\Loris\Utility::isString($results->{{ object}}, \'{{ name + id|pascalcase }}\') /* resource id must be a string */');
    {% endfor %}
        {% if ids %}
        if ($results->{{object}}->{{ name }}{{ ids|pascalcase|join(' != null && \n            $results->' + object + '->' + name) }} != null) {
        {% endif %}

        {% for id in ids %}
            $this->{{ object }}->{{ name }}->{{ id }} = $results->{{ object }}->{{ name + id|pascalcase }};
        {% endfor %}
            $this->{{ object }}->{{ name }}->updateMetaUri();
        {% if ids %}
        } else {
            $this->{{ object }}->{{ name }} = new NullResource(
                $this->{{ object }}->{{ name }}->uri()
            );
        }
        {% endif %}
{% endmacro %}

{% macro object_property_collection(object, name, ids) %}
    {% for id in ids %}
        assert('\Loris\Utility::isString($results->{{ object}}, \'{{ name + id|pascalcase }}\') /* resource id must be a string */');
    {% endfor %}
        assert('\Loris\Utility::isNumber($results->{{ object }}, \'{{ name }}Total\') /* collection total must be a number */');
        {% if ids %}
        if ($results->{{object}}->{{ name }}{{ ids|pascalcase|join(' != null && \n            $results->' + object + '->' + name) }} != null) {
        {% endif %}

        {% for id in ids %}
            $this->{{ object }}->{{ name }}->{{ id }} = $results->{{ object }}->{{ name + id|pascalcase }};
        {% endfor %}
            $this->{{ object }}->{{ name }}->meta->total = intval(
                $results->{{ object }}->{{ name }}Total
            );
            $this->{{ object }}->{{ name }}->updateMetaUri();
        {% if ids %}
        } else {
            $this->{{ object }}->{{ name }} = new NullResource(
                $this->{{ object }}->{{ name }}->uri()
            );
        }
        {% endif %}
{% endmacro %}

{% macro array_property_strings(name, format) %}
        foreach ($results->{{ name }} as $item) {
        {% if format == 'date' %}
            assert('\Loris\Utility::isDate($item) /* property must be in date format */');
            $this->{{ name }}[] = \DateTime::createFromFormat(
                '{{ input_date_format }}', 
                $item
            ) ?: null;
        {% else %}
            assert('\Loris\Utility::isString($item) /* property must be a string */');
            $this->{{ name }}[] = $item;
        {% endif %}
        }
{% endmacro %}

{% macro array_property_numbers(name, format) %}
        foreach ($results->{{ name }} as $item) {
            assert('\Loris\Utility::isNumber($item) /* property must be a number */');
            $this->{{ name }}[] = intval($item);
        }
{% endmacro %}

{% macro array_property_booleans(name) %}
        foreach ($results->{{ name }} as $item) {
            assert('\Loris\Utility::isBool($item) /* property must be a boolean */');
            $this->{{ name }}[] = boolval($item);
        }
{% endmacro %}

{% macro array_property_resources(array, name, ids) %}
        foreach ($results->{{ array }} as $item) {
        {% for id in ids %}
            assert('\Loris\Utility::isString($item, \'{{ name|camelcase + id|pascalcase }}\') /* resource id must be a string */');
        {% endfor %}
            {% if ids %}
            if ($item->{{ name|camelcase + ids|pascalcase|join(' != null && \n                $item->' + name|camelcase) }} != null) {
            {% endif %}

                ${{ name|camelcase }} = clone $this->{{ array }}Template;
            
            {% for id in ids %}
                ${{ name|camelcase }}->{{ id }} = $item->{{ name|camelcase + id|pascalcase }};
            {% endfor %}
                ${{ name|camelcase }}->updateMetaUri();
                $this->{{ array }}[] = ${{ name|camelcase }};
            {% if ids %}
            }
            {% endif %}
        }
{% endmacro %}

{% macro array_property_collections(array, name, ids) %}
        foreach ($results->{{ array }} as $item) {
        {% for id in ids %}
            assert('\Loris\Utility::isString($item, \'{{ name|camelcase + id|pascalcase }}\') /* resource id must be a string */');
        {% endfor %}
            assert('\Loris\Utility::isNumber($item, \'{{ name|camelcase }}Total\') /* {{ name|camelcase }}Total must be a number */');
            {% if ids %}
            if ($item->{{ name|camelcase + ids|pascalcase|join(' != null && \n                $item->' + name|camelcase) }} != null) {
            {% endif %}

                ${{ name|camelcase }} = clone $this->{{ array }}Template;
    
            {% for id in ids %}
                ${{ name|camelcase }}->{{ id }} = $item->{{ name|camelcase + id|pascalcase }};
            {% endfor %}
                ${{ name|camelcase }}->meta->total = intval(
                    $item->{{ name|camelcase }}Total
                );
                ${{ name|camelcase }}->updateMetaUri();
                $this->{{ array }}[] = ${{ name|camelcase }};
            {% if ids %}
            }
            {% endif %}
        }
{% endmacro %}

{% macro array_property_object(name) -%}
            $this->{{ name }}[$i] = clone $this->{{ name }}Template;
{%- endmacro %}

{% macro array_property_object_string(array, name, format) %}
    {% if format == 'date' %}   
            assert('\Loris\Utility::isDate($results->{{ array }}[$i], \'{{ name }}\') /* property must be in date format */');
            $this->{{ array }}[$i]->{{ name }} = \DateTime::createFromFormat(
                '{{ input_date_format }}', 
                $results->{{ array }}[$i]->{{ name }}
            ) ?: null;
    {% else %}
            assert('\Loris\Utility::isString($results->{{ array }}[$i], \'{{ name }}\') /* property must be a string */');
            $this->{{ array }}[$i]->{{ name }} = $results->{{ array }}[$i]->{{ name }};
    {% endif %}
{% endmacro %}

{% macro array_property_object_number(array, name, format) %}
            assert('\Loris\Utility::isNumber($results->{{ array }}[$i], \'{{ name }}\') /* property must be a number */');
            $this->{{ array }}[$i]->{{ name }} = intval(
                $results->{{ array }}[$i]->{{ name }}
            );
{% endmacro %}

{% macro array_property_object_boolean(array, name) %}
            assert('\Loris\Utility::isBool($results->{{ array }}[$i], \'{{ name }}\') /* property must be a boolean */');
            $this->{{ array }}[$i]->{{ name }} = boolval(
                $results->{{ array }}[$i]->{{ name }}
            );
{% endmacro %}

{% macro array_property_object_resource(array, name, ids) %}
        {% for id in ids %}
            assert('\Loris\Utility::isString($results->{{ array }}[$i], \'{{ name + id|pascalcase }}\') /* resource id must be a string */');
        {% endfor %}
            {% if ids %}
            if ($results->{{ array }}[$i]->{{ name + ids|pascalcase|join(' != null && \n                $results->' + array + '[$i]->' + name) }} != null) {
            {% endif %}

            {% for id in ids %}
                $this->{{ array }}[$i]->{{ name }}->{{ id }} = $results->{{ array }}[$i]->{{ name + id|pascalcase }};
            {% endfor %}
                $this->{{ array }}[$i]->{{ name }}->updateMetaUri();
            {% if ids %}
            } else {
                $this->{{ array }}[$i]->{{ name }} = new NullResource(
                    $this->{{ array }}[$i]->{{ name }}->uri()
                );
            }
            {% endif %}
{% endmacro %}

{% macro array_property_object_collection(array, name, ids) %}
        {% for id in ids %}
            assert('\Loris\Utility::isString($results->{{ array }}[$i], \'{{ name + id|pascalcase }}\') /* collection id must be a string */');
        {% endfor %}
            assert('\Loris\Utility::isNumber($results->{{ array }}[$i], \'{{ name }}Total\') /* collection total must be a number */');
            {% if ids %}
            if ($results->{{ array }}[$i]->{{ name + ids|pascalcase|join(' != null && \n                $results->' + array + '[$i]->' + name) }} != null) {
            {% endif %}

            {% for id in ids %}
                $this->{{ array }}[$i]->{{ name }}->{{ id }} = $results->{{ array }}[$i]->{{ name + id|pascalcase }};
            {% endfor %}
                $this->{{ array }}[$i]->{{ name }}->meta->total = intval(
                    $results->{{ array }}[$i]->{{ name }}Total
                );
                $this->{{ array }}[$i]->{{ name }}->updateMetaUri();
            {% if ids %}
            } else {
                $this->{{ array }}[$i]->{{ name }} = new NullResource(
                    $this->{{ array }}[$i]->{{ name }}->uri()
                );
            }
            {% endif %}
{% endmacro %}



