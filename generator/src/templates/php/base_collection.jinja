<?php
namespace Loris\Resource\Base;

class {{ id }} extends MetaCollection
{
    {% if uri is string %}
    const URI = '{{ uri }}';
    {% else %}
    // TODO: Class constants cannot be arrays in PHP. Either this
    // must be static, or not defined as an array. In the meantime,
    // the first URI entry was chosen as self::URI.
    const URI = '{{ uri[0] }}';
    /*
    const URI = [
        '{{ uri|join('\',\n        \'') }}'
    ];
    */
    {# ' <- just to fix broken highlighting :) #}
    {% endif %}

    /**
     * 
     * @var array({{ properties.collection.resource }})
     */
    public $collection = null;

    /**
     * Whether fromResults() has been ran on this collection
     *
     * @var boolean
     */
    private $hydrated = false;

    /**
     *
     * @var array
     */
    private $expansions = null;

    {% if id_keys %}
    /**
     * Track the properties that are used as our resources 
     * distinct identifier (one or composite). Each match
     * within URI must exist within this list. 
     */
    private $_id = [
        '{{ id_keys|join('\', \'') }}'
    ];
    {# ' <- just to fix broken highlighting :) #}
    {% else %}
    /**
     * This resource does not have any IDs
     */
    private $_id = null;
    {% endif %}

    // Properties
{% for name, property in properties|dictsort %}
    {% if name in id_keys %}
    {% if property.description %}
    /** 
     * {{ property.description|replace('\n', '\n     * ') }}
     * type: {{ property.format if property.format else property.type }}
     */
    {% else %}
    /** type: {{ property.type }} */
    {% endif %}
    public ${{ name }} = null;
    {% endif %}

{% endfor %}

    /**
     * @param array $ids Unique identifiers for this collection
     */
    function __construct($ids)
    {
        parent::__construct($ids, self::URI);
    }

    /**
     *
     * @param array({{ id }}) ${{ id|camelcase }}s
     */
    public static function query(array ${{ id_var_plural }})
    {
        throw new \Exception(
            'Base\\{{ id }}::query() cannot be called directly.'
        );
    }

    /**
     *
     * @param array({{ id }}) ${{ id_var_plural }}
     * @param array $results
     */
    public static function postQuery(array ${{ id_var_plural }}, array $results)
    {
        foreach (${{ id_var_plural }} as ${{ id_var }}) {
            $found = false;
            foreach ($results as $result) {
                if ({% if id_keys %}{% for id in id_keys -%}
                        $result->{{ id }} == ${{ id_var }}->{{ id }} 
                    {{- ' &&\n                    ' if not loop.last }}
                {%- endfor %} &&
                {% endif %}
                    $result->page == ${{ id_var }}->meta->page &&
                    $result->limit == ${{ id_var }}->meta->limit) {
                    
                    ${{ id_var }}->fromResults($result);
                    $found = true;
                    break;
                }
            }
            if (!$found) {
                $ids = [
                {% for id in id_keys %}
                    '{{ id }}=' . ${{ id_var }}->{{ id }}{{',' if not loop.last }}
                {% endfor %}
                ];

                ${{ id_var }}->setError(
                    '{{ id }} <' . implode(', ', $ids) . '> missing from query'
                );
                //${{ id_var }} = new NotFoundResource(
                //    ${{ id_var }}->uri()
                //);
                // TODO: How to deal with missing resources! Doing a &{{ id_var }} above
                // during iteration breaks collection functionality, as the last item in
                // the iteration seems to not be expanded on (why?...) 
            }
        }

        // For all collections not already hydrated, 
        // join their list of items for a query to complete hydration
        ${{ properties.collection.resource|camelcase }}s = [];
        foreach (${{ id_var_plural }} as ${{ id_var }}) {
            if (count(${{ id_var }}->collection) > 0 &&
                !${{ id_var }}->hydrated) {
                ${{ properties.collection.resource|camelcase }}s = array_merge(
                    ${{ properties.collection.resource|camelcase }}s, 
                    ${{ id_var }}->collection
                );
            }
        }

        if (count(${{ properties.collection.resource|camelcase }}s) > 0) {
            
            // Resolve to a {{ properties.collection.resource }} or ExternalResource
            ${{ properties.collection.resource|camelcase}}Model = \Loris\Discovery::find(
                '{{ properties.collection.uri }}'
            );

            // Execute query for set of resources
            call_user_func(
                [${{ properties.collection.resource|camelcase }}Model->class, 'query'], 
                ${{ properties.collection.resource|camelcase }}s
            );
        }
    }

    /**
     * @param \stdClass $results
     */
    public function fromResults(\stdClass $results)
    {
    {% for id in id_keys %}
        assert('\Loris\Utility::isString($results, \'{{ id }}\') /* property must be a string */');
        $this->{{ id }} = $results->{{ id }};
    {% endfor %}

        assert('\Loris\Utility::isNumber($results, \'page\') /* property must be a number */');
        $this->meta->page = intval($results->page);

        assert('\Loris\Utility::isNumber($results, \'limit\') || $results->limit === \'all\' /* property must be a number or \'all\' */');
        $this->meta->limit = intval($results->limit);

        assert('\Loris\Utility::isNumber($results, \'total\') /* property must be a number */');
        $this->meta->total = intval($results->total);

        $this->collection = [];

        // Resolve resource URI into a model
        ${{ properties.collection.resource|camelcase }}Model = \Loris\Discovery::find(
            '{{ properties.collection.uri }}'
        );

        // Add a {{ properties.collection.resource }} for each ID
        foreach ($results->collection as $row) {
            // Note we resolve the model here instead of doExpansions
            // as no matter what, if a collection is hydrated, the
            // collection items must also be hydrated. 
            ${{ properties.collection.resource|camelcase }} = new ${{ properties.collection.resource|camelcase }}Model->class(
                [{% for id in properties.collection.ids -%}
                '{{ id }}' => $row->{{ properties.collection.resource|camelcase }}{{ id|pascalcase }}
                {{- ', ' if not loop.last }}
                {%- endfor %}]
            );

            $this->collection[] = ${{ properties.collection.resource|camelcase }};
        }

        $this->doExpansions();

        // If this collection result also includes the hydrated items, 
        // skip the next query step and load directly
        if (property_exists($results, 'includesItems') && 
            $results->includesItems === true) {
            $this->hydrateItems($results);
        }
    }

    /**
     * Use the resultset from query() to also hydrate all items.
     * This skips the additional hydration step from within
     * item::query() and calls item::postQuery() directly.
     * 
     * @param \stdClass $results
     */
    public function hydrateItems(\stdClass $results)
    {
        // Resolve resource URI into a model
        ${{ properties.collection.resource|camelcase}}Model = \Loris\Discovery::find(
            '{{ properties.collection.uri }}'
        );

        call_user_func(
            [${{ properties.collection.resource|camelcase }}Model->class, 'postQuery'], 
            $this->collection, 
            $results->collection
        );

        // Note that we've hydrated our collection to it's fullest.
        $this->hydrated = true;
    }

    /**
     *
     * @param array $resources
     */
    public function expand(array $resources)
    {
        $this->expansions = $resources;
    }

    /**
     * Perform actual expansions after hydration, in case we dynamically
     * add additional resource references while hydrating from the data store
     * (e.g. resources stored in Arrays or Objects)
     */
    private function doExpansions()
    {
        if ($this->expansions === null) {
            return;
        }

        foreach ($this->collection as ${{ properties.collection.resource|camelcase }}) {
            ${{ properties.collection.resource|camelcase }}->expand($this->expansions);
        }
    }

    /**
     * @return stdClass
     */
    public function serialize()
    {
        // Get serialized data from MetaCollection
        $serialized = parent::serialize();

        // If this collection had an error during processing, return
        // the error message structure serialized by MetaCollection
        // and hide any properties/relationships that may be invalid. 
        if ($this->hasError()) {
            return $serialized;
        }

        // Serialize all of our {{ properties.collection.resource }}s
        $serialized->collection = [];
        foreach ($this->collection as ${{ properties.collection.resource|camelcase }}) {
            $serialized->collection[] = ${{ properties.collection.resource|camelcase }}->serialize();
        }

        return $serialized;
    }
}

