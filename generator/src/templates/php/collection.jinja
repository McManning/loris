<?php
namespace Loris\Resource;

use \Loris\Utility;

class {{ id }} extends Base\{{ id }}
{
    public static function query(array ${{ id_var_plural }})
    {
        $results = [];

        foreach (${{ id_var_plural }} as ${{ id_var }}) {
            $results[] = ${{ id_var }}->querySingle();
        }

        self::postQuery(${{ id_var_plural }}, $results);
    }

    /**
     * @brief Simpler query for a set of collection results.
     * 
     * Since we do not currently have the capability to query multiple
     * collections simultaneously (due to the need for each to pass in its
     * own page & limit), querySingle() runs a single instance of a collection,
     * and then returns the results to be merged in with the rest. 
     * 
     * @return \stdClass
     */
    public function querySingle()
    {
        /**********************************************************
            YOUR BACKEND QUERY CODE HERE

            For SQL/PDO, it expects the following:

                rowset 0 (collection attributes)
                    {% if id_keys %}
                    {{ id_keys|join(', ') }}, page, limit, total
                    {% else %}
                    page, limit, total
                    {% endif %}

                rowset 1 (ids of each resource on the page)
                {% if id_keys %}
                    {{ id_keys|join(', ') }}, {% for rid in properties.collection.ids %}
                    {{- properties.collection.resource|camelcase + rid|pascalcase -}}, 
                    {% endfor %}
                {% else %}
                    {% for rid in properties.collection.ids %}
                    {{ properties.collection.resource|camelcase + rid|pascalcase -}}, 
                    {% endfor %}
                {% endif %}
                    ...

            Useful variables for your query include:
            {% if id_keys %}
                $this->ids() - unique identifiers of this collection
            {% endif %}
                $this->meta->page - requested collection page
                $this->meta->limit - requested number of results 

            The output of your query must be formatted as below:

            $results = \stdClass(
            {% for id in id_keys %}
                {{ id }} = string
            {% endfor %}
                page = number
                limit = number
                total = number
                collection = array(
                    \stdClass(
                    {% for rid in properties.collection.ids %}
                        {{ properties.collection.resource|camelcase + rid|pascalcase }}
                    {% endfor %}
                        ... optionally this may include all attributes of the collection
                        items as well. (The same structure expected from the 
                        {{ properties.collection.resource }} implementation)
                        If you include the resource data as well, the results you pass
                        into postQuery() must also have an attribute `includesItems`
                        set to boolean `true`.
                    )
                )
            )

            The below code assumes $statement is a PDO  
            prepared statement that has been executed. 
        ***********************************************************/

        $results = Utility::parseSqlResults($statement, [
            'collection' => [ // Array of objects containing resource ids
                'rowset' => 1,
                'type' => 'array'
            ]
        ]);

        return $results;
    }
}

